//--------------------------------------------------------------------------
// Copyright 2018 infinimesh
// www.infinimesh.io
//
//   Licensed under the Apache License, Version 2.0 (the "License");
//   you may not use this file except in compliance with the License.
//   You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
//   Unless required by applicable law or agreed to in writing, software
//   distributed under the License is distributed on an "AS IS" BASIS,
//   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//   See the License for the specific language governing permissions and
//   limitations under the License.
//--------------------------------------------------------------------------

syntax = "proto3";

package infinimesh.node;

option go_package = "nodepb";
option java_multiple_files = true;
option java_outer_classname = "NodeProto";
option java_package = "com.infinimesh.node";

import "google/protobuf/wrappers.proto";
import "google/protobuf/field_mask.proto";

// Account

message IsRootRequest { string account = 1; }

message IsRootResponse { bool is_root = 1; }

message IsAdminRequest { string account = 1; }

message IsAdminResponse { bool is_admin = 1; }

message OwnershipRequest { 
  string ownerid = 1; 
  string accountid = 2;
}

message OwnershipResponse { }

message IsAuthorizedNamespaceRequest {
  string namespaceid = 1;
  string account = 2;
  Action Action = 3;
}

message IsAuthorizedNamespaceResponse {
  google.protobuf.BoolValue decision = 1;
}

message IsAuthorizedRequest {
  string node = 1;
  string account = 2;
  Action action = 3;
}

message IsAuthorizedResponse { google.protobuf.BoolValue decision = 1; }

message CreateUserAccountRequest {
  Account account = 1;
  string password = 2; //To be Deprecated. Donot use this field. Instead use the password field in Account struct
  bool create_gf_user = 4;
}

message CreateUserAccountResponse { string uid = 1; }

enum Action {
  NONE = 0;
  READ = 1;
  WRITE = 2;
}

message AuthorizeRequest {
  string account = 1;
  string node = 2;
  string action = 3;
  bool inherit = 4;
}

message AuthorizeResponse {}

message GetAccountRequest { string id = 1; }

message Account {
  string uid = 1;
  string name = 2;
  bool is_root = 3;
  bool enabled = 4;
  Namespace default_namespace = 5;
  string password = 6;
  bool is_admin = 7;
  string owner = 8;
  string username = 9;
}

message AuthenticateRequest {
  string username = 1;
  string password = 2;
}

message AuthenticateResponse {
  bool success = 1;
  Account account = 2;
  string default_namespace = 3;
}

message DeleteObjectRequest {
  string uid = 1;
}

message DeleteObjectResponse {}

// Object

message CreateObjectRequest {
  string name = 1;
  string parent = 2;
  string kind = 3;
  string namespaceid = 4;
}

message Object {
  string uid = 1;
  string name = 2;
  string kind = 3;
  repeated Object objects = 4;
}

message ListObjectsRequest {
  string account = 1;
  string namespace = 2;
  bool recurse = 3;
}

message ListObjectsResponse { repeated Object objects = 1; }

message AuthorizeNamespaceRequest {
  string account = 1;
  string namespace = 2;
  Action action = 3;
}

message ListAccountsRequest {}
message ListAccountsResponse{
  repeated Account accounts = 1;
}

message AuthorizeNamespaceResponse {}

message UpdateAccountRequest {
  Account account = 1;
  google.protobuf.FieldMask fieldMask = 2;
}

message UpdateAccountResponse {}

message SetPasswordRequest {
  string username = 1;
  string password = 2;
}

message SetPasswordResponse{
}

message DeleteAccountRequest {
  string uid = 1;
  bool harddelete = 2;
}

message DeleteAccountResponse {}

service AccountService {
  rpc CreateUserAccount(CreateUserAccountRequest) returns (CreateUserAccountResponse);
  rpc UpdateAccount(UpdateAccountRequest) returns (UpdateAccountResponse);
  rpc GetAccount(GetAccountRequest) returns (Account);
  rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);
  rpc SetPassword(SetPasswordRequest) returns (SetPasswordResponse);
  rpc DeleteAccount(DeleteAccountRequest) returns (DeleteAccountResponse);

  rpc Authenticate(AuthenticateRequest) returns (AuthenticateResponse);
  rpc IsAuthorized(IsAuthorizedRequest) returns (IsAuthorizedResponse);
  rpc IsAuthorizedNamespace(IsAuthorizedNamespaceRequest) returns (IsAuthorizedNamespaceResponse);
  rpc Authorize(AuthorizeRequest) returns (AuthorizeResponse);
  rpc AuthorizeNamespace(AuthorizeNamespaceRequest) returns (AuthorizeNamespaceResponse);
  rpc IsRoot(IsRootRequest) returns (IsRootResponse);
  rpc IsAdmin(IsAdminRequest) returns (IsAdminResponse);
  rpc AssignOwner(OwnershipRequest) returns (OwnershipResponse);
	rpc RemoveOwner(OwnershipRequest) returns (OwnershipResponse);
}

message Namespace {
  string id = 1;
  string name = 2;
  bool markfordeletion = 3;
  string deleteinitiationtime = 4;
  int32 RetentionPeriod= 5;
}

message CreateNamespaceRequest {
  string name = 1;
}

message GetNamespaceRequest {
  string namespace = 1; // name
}

message ListNamespacesRequest {}

message ListNamespacesForAccountRequest {
  string account = 1;
}

message ListNamespacesResponse {
  repeated Namespace namespaces = 1;
}

message ListPermissionsRequest {
  string namespace = 1;
}

message ListPermissionsResponse{
  repeated Permission permissions = 1;
}

message DeletePermissionRequest {
  string namespace = 1;
  string account_id = 2;
}

message DeletePermissionResponse{
}

message Permission {
  string namespace = 1;
  string account_id = 2;
  string account_name = 3;
  Action action = 4;
}

message DeleteNamespaceRequest {
  string namespaceid = 1;
  bool harddelete = 2;
}

message DeleteNamespaceResponse{}

message UpdateNamespaceRequest {
  Namespace namespace = 1;
  google.protobuf.FieldMask namespaceMask = 2;
}

message UpdateNamespaceResponse {}

service ObjectService {
  rpc CreateObject(CreateObjectRequest) returns (Object);
  rpc ListObjects(ListObjectsRequest) returns (ListObjectsResponse);
  rpc DeleteObject(DeleteObjectRequest) returns (DeleteObjectResponse);
}

service Namespaces {
  rpc CreateNamespace(CreateNamespaceRequest) returns (Namespace);
  rpc GetNamespace(GetNamespaceRequest) returns (Namespace);
  rpc ListNamespaces(ListNamespacesRequest) returns (ListNamespacesResponse);
  rpc ListPermissions(ListPermissionsRequest) returns (ListPermissionsResponse);
  rpc DeletePermission(DeletePermissionRequest) returns (DeletePermissionResponse);
  rpc DeleteNamespace(DeleteNamespaceRequest) returns (DeleteNamespaceResponse);
  rpc UpdateNamespace(UpdateNamespaceRequest) returns (UpdateNamespaceResponse);
}
